import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
    id "com.peterabeles.gversion" version "1.8.3"
    id "net.ltgt.errorprone" version "1.2.1"
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'org.ddogleg'
version = '0.19-SNAPSHOT'
project.archivesBaseName = 'ddogleg'

gversion {
    srcDir       = "src"
    classPackage = "org.ddogleg"
    className    = "DDoglegVersion"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// Creates Java 8 byte code
compileJava {
    options.compilerArgs = [ "--release", "8" ]
}

repositories {
    mavenCentral()
    mavenLocal()

    maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url = 'https://jitpack.io' } // Allows annotations past Java 8 to be used
}

sourceSets {
    benchmark {
        java { srcDir 'benchmark/src' }
        resources {  srcDir 'benchmark/resources' }
    }

    main {
        java { srcDir 'src'  }
        resources { srcDir 'resources/src' }
    }

    test {
        java {
            srcDir 'examples/src'
            srcDir 'test'
            srcDir 'generate'
            srcDir 'benchmark/test'
        }
        resources { srcDir 'resources/test' }
    }
}

dependencies {
    ['ejml-core','ejml-fdense','ejml-ddense','ejml-simple','ejml-dsparse'].each { String a ->
        compile group: 'org.ejml', name: a, version: '0.39'}

    implementation 'org.jetbrains:annotations:20.0.0' // @Nullable
    implementation 'javax.annotation:jsr250-api:1.0'  // @Generated

    testImplementation( 'org.junit.jupiter:junit-jupiter-api:5.4.0')
    testRuntimeOnly( 'org.junit.jupiter:junit-jupiter-engine:5.4.0')

    testCompile project.sourceSets.benchmark.output

    benchmarkCompile project.sourceSets.main.output
    benchmarkCompile project.sourceSets.main.runtimeClasspath
    benchmarkCompile project.sourceSets.main.compileClasspath

    // needed to use Java 11+ syntax with Java 1.8 byte code
    annotationProcessor('com.github.bsideup.jabel:jabel-javac-plugin:0.2.0'){
        exclude group: 'net.bytebuddy', module: 'byte-buddy'
        exclude group: 'net.bytebuddy', module: 'byte-buddy-agent'
    }
    annotationProcessor("net.bytebuddy:byte-buddy:1.10.10")
    annotationProcessor("net.bytebuddy:byte-buddy-agent:1.10.10")

    errorprone "com.google.errorprone:error_prone_core:2.4.0"
    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"

    // even if it's not used you still need to include the dependency
    annotationProcessor "com.uber.nullaway:nullaway:0.8.0"
    testAnnotationProcessor "com.uber.nullaway:nullaway:0.8.0"
    benchmarkAnnotationProcessor "com.uber.nullaway:nullaway:0.8.0"
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone.enabled = false
    options.errorprone.disableWarningsInGeneratedCode = true
    options.errorprone.disable("TypeParameterUnusedInFormals","StringSplitter","InconsistentCapitalization",
            "HidingField", // this is sometimes done when the specific type is known by child. Clean up later.
            "ClassNewInstance", // yes it's deprecated, but new version is more verbose with ignored errors
            "FloatingPointLiteralPrecision", // too many false positives in test code
            "MissingSummary","UnescapedEntity","EmptyBlockTag")
    options.errorprone.error("MissingOverride","MissingCasesInEnumSwitch","BadInstanceof",
            "PublicConstructorForAbstractClass","EmptyCatch","NarrowingCompoundAssignment","JdkObsolete")

    // By default have all NullAway issues be fata errors but don't run this analysis on auto generated files
    options.errorprone {
        check("NullAway", CheckSeverity.ERROR)
        // The line below effectively disables NullAway by default
        option("NullAway:AnnotatedPackages", "RANDOM.PACKAGE.TO.DISABLE")
        option("NullAway:TreatGeneratedAsUnannotated", true)
    }

    if( name.startsWith("compileTest") )
        return
    if( name.startsWith("compileBenchmark") )
        return
    options.errorprone.enabled = true

    // Enable NullAway
    options.errorprone {
        option("NullAway:AnnotatedPackages", "org.ejml")
    }
}

javadoc {
    configure(options) {
        links = ['http://docs.oracle.com/javase/8/docs/api/',
                 'http://ejml.org/javadoc/']
        failOnError = false
        enabled = false // disable to stop it from spamming stdout
    }
}

test {
    ignoreFailures true
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

// Creates Java 8 byte code on Java 9+
if(JavaVersion.current() != JavaVersion.VERSION_1_8) {
    compileJava {
        options.compilerArgs = ["--release", "8"]
    }
}

// Force uploadArchives to fail if trying to upload a stable release and git is dirty
uploadArchives.dependsOn failDirtyNotSnapshot

// if Maven central isn't setup in gradle.properties skip all of this
if( project.hasProperty('ossrhUsername') ) {
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'DDogleg'
                    packaging 'pom'
                    // optionally artifactId can be defined here
                    description 'DDogleg Numerics is a high performance Java library for non-linear optimization, robust model fitting, polynomial root finding, sorting, and more.'
                    url 'http://ddogleg.org'

                    scm {
                        connection 'scm:git:git@github.com:lessthanoptimal/ddogleg.git'
                        developerConnection 'scm:git:git@github.com:lessthanoptimal/ddogleg.git'
                        url 'https://github.com/lessthanoptimal/ddogleg'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'pabeles'
                            name 'Peter Abeles'
                            email 'peter.abeles@gmail.com'
                        }
                    }
                }
            }
        }
    }
}

// Creates a directory with all the compiled jars and the dependencies
task createLibraryDirectory( dependsOn: ['jar','sourcesJar'] ) {
    doLast {
        ext.listExternal = files(project.configurations.compile)
        ext.listInternal = files(project.tasks.jar.archivePath)
        ext.listSource = files(project.tasks.sourcesJar.archivePath)

        ext.listExternal = ext.listExternal - ext.listInternal

        file('libraries').deleteDir()
        file('libraries').mkdir()

        copy {
            from ext.listExternal
            into 'libraries'
        }

        copy {
            from ext.listInternal
            from ext.listSource
            into 'libraries'
        }
    }
}

task alljavadoc(type: Javadoc) {
    // only include source code in src directory to avoid including 3rd party code which some projects do as a hack
    source = project.fileTree('src').include('**/*.java')
    classpath = project.sourceSets.main.compileClasspath

    destinationDir = file("${buildDir}/docs/javadoc")

    // Hack for Java 8u121 and beyond. Comment out if running an earlier version of Java
    options.addBooleanOption("-allow-script-in-comments", true)
    options.addBooleanOption("-no-module-directories", true)

    // Add a list of uses of a class to javadoc
    options.use = true

    configure(options) {
        failOnError = false
        docTitle = "DDogleg ($project.version)"
        links = [ 'http://docs.oracle.com/javase/8/docs/api/',
                  'http://ejml.org/javadoc/' ]
        bottom = file('misc/bottom.txt').text
    }
}

project.compileJava.dependsOn(createVersionFile)

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '6.4.1'
}
